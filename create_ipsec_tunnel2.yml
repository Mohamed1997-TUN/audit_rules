---
- name: Configure FortiGate VPN via AWX Survey
  hosts: fortigate
  gather_facts: false

  # Map AWX survey variables to VPN configuration
  vars:
    vpn:
      name: "{{ vpn_name }}"
      interface: "{{ vpn_interface }}"
      peertype: "{{ vpn_peertype | default('any') }}"
      local_interface: "{{ vpn_local_interface }}"
      local_subnet: "{{ vpn_local_subnet }}"
      remote_subnet: "{{ vpn_remote_subnet }}"
      remote_gw: "{{ vpn_remote_gw }}"
      psk: "{{ vpn_psk }}"
      comment: "{{ vpn_comment | default('VPN configured via AWX') }}"
      proposal: "{{ vpn_proposal | default('des-md5') }}"
      phase2_proposal: "{{ vpn_phase2_proposal | default('des-md5') }}"

  tasks:
    # Input validation using native Ansible filters
    - name: Validate network formats
      block:
        - name: Verify local subnet format
          ansible.builtin.assert:
            that:
              - vpn.local_subnet is regex('^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3} \\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$')
            fail_msg: "Invalid local subnet format. Use 'X.X.X.X Y.Y.Y.Y' (e.g. '10.0.0.0 255.255.255.0')"

        - name: Verify remote subnet format
          ansible.builtin.assert:
            that:
              - vpn.remote_subnet is regex('^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3} \\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$')
            fail_msg: "Invalid remote subnet format. Use 'X.X.X.X Y.Y.Y.Y'"

        - name: Verify remote gateway format
          ansible.builtin.assert:
            that:
              - vpn.remote_gw is regex('^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$')
            fail_msg: "Invalid remote gateway IP format. Use valid IPv4 address"

      rescue:
        - name: Show validation error
          ansible.builtin.fail:
            msg: "Configuration validation failed. See specific errors above."
          when: ansible_failed_result is defined

    # Apply configuration to FortiGate
    - name: Configure IPSec Tunnel
      ansible.builtin.raw: |
        config vpn ipsec phase1-interface
          edit "{{ vpn.name }}"
            set interface "{{ vpn.interface }}"
            set peertype {{ vpn.peertype }}
            set proposal {{ vpn.proposal }}
            set remote-gw {{ vpn.remote_gw }}
            set psksecret {{ vpn.psk }}
            set comments "{{ vpn.comment }}"
          next
        end

        config vpn ipsec phase2-interface
          edit "{{ vpn.name }}"
            set phase1name "{{ vpn.name }}"
            set proposal {{ vpn.phase2_proposal }}
            set src-subnet {{ vpn.local_subnet }}
            set dst-subnet {{ vpn.remote_subnet }}
          next
        end

        config firewall policy
          edit 0
            set name "{{ vpn.name }}_outbound"
            set srcintf "{{ vpn.local_interface }}"
            set dstintf "{{ vpn.name }}"
            set srcaddr all
            set dstaddr all
            set action accept
            set schedule always
            set service ALL
          next
          edit 0
            set name "{{ vpn.name }}_inbound"
            set srcintf "{{ vpn.name }}"
            set dstintf "{{ vpn.local_interface }}"
            set srcaddr all
            set dstaddr all
            set action accept
            set schedule always
            set service ALL
          next
        end

        config router static
          edit 0
            set dst {{ vpn.remote_subnet }}
            set device "{{ vpn.name }}"
          next
        end
      register: config_result
      changed_when: "'success' in config_result.stdout"

    # Save configuration
    - name: Save FortiGate configuration
      ansible.builtin.raw: "execute cfg save"
      when: config_result is changed

    # Verify tunnel status
    - name: Check VPN tunnel status
      ansible.builtin.raw: "diagnose vpn ike gateway list name '{{ vpn.name }}'"
      register: vpn_status
      failed_when: "'ESTABLISHED' not in vpn_status.stdout"
      changed_when: false
