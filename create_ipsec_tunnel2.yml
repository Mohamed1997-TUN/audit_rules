---
- name: Configure FortiGate VPN via AWX Survey
  hosts: fortigate
  gather_facts: false

  # Map AWX survey variables to your existing vpn structure
  vars:
    vpn:
      name: "{{ vpn_name }}"
      interface: "{{ vpn_interface }}"
      peertype: "{{ vpn_peertype | default('any') }}"
      local_interface: "{{ vpn_local_interface }}"
      local_subnet: "{{ vpn_local_subnet }}"
      remote_subnet: "{{ vpn_remote_subnet }}"
      remote_gw: "{{ vpn_remote_gw }}"
      psk: "{{ vpn_psk }}"
      comment: "{{ vpn_comment | default('VPN configured via AWX') }}"
      proposal: "{{ vpn_proposal | default('des-md5') }}"
      phase2_proposal: "{{ vpn_phase2_proposal | default('des-md5') }}"
      # Optional AWX-driven parameters
      dhgrp: "{{ vpn_dhgrp | default(omit) }}"
      pfs: "{{ vpn_pfs | default(omit) }}"

  tasks:
    # Validate critical parameters
    - name: Validate subnet formats
      ansible.builtin.assert:
        that:
          - vpn.local_subnet | regex_match('^[0-9./ ]+$')
          - vpn.remote_subnet | regex_match('^[0-9./ ]+$')
          - vpn.remote_gw | regex_match('^[0-9.]+$')
        fail_msg: "Invalid subnet or IP address format"

    # Generate config from template (if using templates)
    - name: Render VPN configuration
      ansible.builtin.template:
        src: "templates/ipsectunnel.j2"
        dest: "/tmp/fortigate_vpn_{{ vpn.name }}.cfg"
      delegate_to: localhost
      when: use_template | default(false) | bool

    # Push configuration directly (raw module alternative)
    - name: Apply VPN configuration
      ansible.builtin.raw: |
        config vpn ipsec phase1-interface
          edit "{{ vpn.name }}"
            set interface "{{ vpn.interface }}"
            set peertype {{ vpn.peertype }}
            set proposal {{ vpn.proposal }}
            {% if vpn.dhgrp is defined %}set dhgrp {{ vpn.dhgrp }}{% endif %}
            set remote-gw {{ vpn.remote_gw }}
            set psksecret {{ vpn.psk }}
            set comments "{{ vpn.comment }}"
          next
        end

        config vpn ipsec phase2-interface
          edit "{{ vpn.name }}"
            set phase1name "{{ vpn.name }}"
            set proposal {{ vpn.phase2_proposal }}
            {% if vpn.pfs is defined %}set pfs {{ vpn.pfs }}{% endif %}
            set src-subnet {{ vpn.local_subnet }}
            set dst-subnet {{ vpn.remote_subnet }}
          next
        end

        config firewall policy
          edit 0
            set name "{{ vpn.name }}_outbound"
            set srcintf "{{ vpn.local_interface }}"
            set dstintf "{{ vpn.name }}"
            set srcaddr all
            set dstaddr all
            set action accept
            set schedule always
            set service ALL
          next
          edit 0
            set name "{{ vpn.name }}_inbound"
            set srcintf "{{ vpn.name }}"
            set dstintf "{{ vpn.local_interface }}"
            set srcaddr all
            set dstaddr all
            set action accept
            set schedule always
            set service ALL
          next
        end

        config router static
          edit 0
            set dst {{ vpn.remote_subnet }}
            set device "{{ vpn.name }}"
          next
        end
      register: config_push
      changed_when: "'success' in config_push.stdout"

    # Save configuration
    - name: Save FortiGate config
      ansible.builtin.raw: "execute cfg save"
      when: config_push is changed

    # Verify tunnel status
    - name: Check VPN status
      ansible.builtin.raw: "diagnose vpn ike gateway list name '{{ vpn.name }}'"
      register: vpn_status
      failed_when: "'ESTABLISHED' not in vpn_status.stdout"