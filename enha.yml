- name: Get and convert unused FortiGate firewall rules since X days ago
  hosts: fortigate
  gather_facts: no
  connection: local

  vars:
    cutoff_days: 10
    vdom: "root"
    output_dir: "/home/dhia/Desktop/createfirewall/audit_rules"
    output_file: "{{ output_dir }}/unused_rules_{{ cutoff_days }}days.html"
    temp_file_path: "{{ output_dir }}/hello_awx.txt"

    fortigate_token: "HjGc8xyN3bq6zNH6k430qtff6znbzN"  # Store this securely in production
    scp_password: "96808538"
    local_machine_ip: "192.168.11.209"
    local_machine_user: "dhia"
    local_machine_path: "/home/dhia/Desktop/createfirewall/audit_rules"

  tasks:

    - name: Ensure output directory exists
      file:
        path: "{{ output_dir }}"
        state: directory
        mode: '0755'
      delegate_to: localhost
      become: false

    - name: Get current epoch timestamp
      command: date +%s
      register: current_epoch_result
      delegate_to: localhost
      become: false

    - name: Calculate cutoff epoch
      set_fact:
        current_epoch: "{{ current_epoch_result.stdout | int }}"
        cutoff_epoch: "{{ (current_epoch_result.stdout | int) - (cutoff_days * 86400) }}"

    - name: Wait before API call (rate limit protection)
      pause:
        seconds: 2

    - name: Get firewall policy stats from FortiGate
      uri:
        url: "http://{{ ansible_host }}/api/v2/monitor/firewall/policy?vdom={{ vdom }}"
        method: GET
        headers:
          Authorization: "Bearer {{ fortigate_token }}"
        return_content: yes
      register: policy_response
      until: policy_response.status == 200  # ✅ Fixed from status_code
      retries: 5
      delay: 10
      failed_when: policy_response.status != 200

    - name: Filter unused rules (never used or not used since X days)
      set_fact:
        unused_rules: >-
          [{% for rule in (policy_response.json.results | default([])) %}
            {% set last_used = (rule.get('last_used', 0) | int) %}
            {% if last_used == 0 or last_used < cutoff_epoch %}
              {{ rule | combine({'last_used': last_used}) }}{% if not loop.last %},{% endif %}
            {% endif %}
          {% endfor %}]

    - name: Convert last_used to readable date
      set_fact:
        converted_unused_rules: >-
          [{% for rule in unused_rules %}
            {% if rule.last_used != 0 %}
              {% set human_date = lookup('pipe', 'date -d @' ~ rule.last_used ~ ' "+%Y-%m-%d"') %}
              {{ rule | combine({'last_used': human_date}) }}{% if not loop.last %},{% endif %}
            {% else %}
              {{ rule | combine({'last_used': 'N/A'}) }}{% if not loop.last %},{% endif %}
            {% endif %}
          {% endfor %}]

    - name: Generate HTML report
      copy:
        content: |
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>Unused Firewall Rules</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              .rule { border-bottom: 1px solid #ccc; margin-bottom: 15px; padding-bottom: 10px; }
            </style>
          </head>
          <body>
            <h1>Unused Firewall Rules (Last {{ cutoff_days }} days)</h1>
            {% for rule in converted_unused_rules %}
              <div class="rule">
                <strong>ID:</strong> {{ rule.policyid }}<br>
                <strong>Last Used:</strong> {{ rule.last_used }}<br>
                <strong>Bytes:</strong> {{ rule.bytes | default('N/A') }}<br>
                <strong>Hit Count:</strong> {{ rule.hit_count | default('0') }}<br>
                <strong>Comments:</strong> {{ rule.comments | default('N/A') }}
              </div>
            {% else %}
              <p>No unused rules found.</p>
            {% endfor %}
          </body>
          </html>
        dest: "{{ output_file }}"
      delegate_to: localhost
      become: false

    - name: Read HTML report content
      slurp:
        src: "{{ output_file }}"
      register: html_content_base64
      delegate_to: localhost
      become: false

    - name: Decode and write HTML content into hello_awx.txt
      copy:
        content: "{{ html_content_base64.content | b64decode }}"
        dest: "{{ temp_file_path }}"
      delegate_to: localhost
      become: false

    - name: Create destination path on target machine
      shell: >
        sshpass -p {{ scp_password }}
        ssh -o StrictHostKeyChecking=no {{ local_machine_user }}@{{ local_machine_ip }}
        "mkdir -p {{ local_machine_path }}"
      delegate_to: localhost
      become: false

    - name: SCP the HTML report to target machine
      command: >
        sshpass -p {{ scp_password }}
        scp -o StrictHostKeyChecking=no {{ output_file }}
        {{ local_machine_user }}@{{ local_machine_ip }}:{{ local_machine_path }}/
      delegate_to: localhost
      become: false

    - name: Summary
      debug:
        msg: >
          ✅ {{ unused_rules | length }} unused firewall rule(s) older than {{ cutoff_days }} days.
          HTML report saved to {{ output_file }} and copied to {{ local_machine_ip }}.
